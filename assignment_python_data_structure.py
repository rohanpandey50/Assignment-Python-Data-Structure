# -*- coding: utf-8 -*-
"""Assignment : Python Data Structure

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PErJi-woBgaWru_PaS7RqTsvvePbJpVF
"""

# Write a code to reverse a string.
word = input("Enter your string:-")
rev_word = word[::-1]
print(f"Your reversed string is :-{rev_word}")

# Write a code to count the number of vowels in a string.
word=input("Enter your string:-")
vowel="aeiou"
count=0
for char in word.lower():
  if char in vowel:
    count+=1
print(f"Number of vowels are:-{count}")

# Write a code to check if a given string is a palindrome or not .
word=input("Enter your string:-")
if word==word[::-1]:
  print(f"{word} is palindrome")
else:
  print(f"{word} is not palindrome")

# Write a code to check if two given strings are anagrams of each other .
word_1=input("enter your 1st string:-")
word_2=input("enter your 2nd string:-")
if sorted(word_1.lower())==sorted(word_2.lower()):
  print(f"{word_1} and {word_2} are anagrams")
else:
   print(f"{word_1} and {word_2} are not anagrams")

# Write a code to find all ocurrence of a given substring within another string .
string=input("Enter your string:-")
sub_str=input("Enter your substring:-")
position=[]
i=0
while i<len(string):
  index=string.find(sub_str,i)
  if index==-1:
    break;
  else:
    position.append(index)
    i=index+len(sub_str)

if len(position)==0:
  print(f"substring {sub_str} not found")
else:
  print(f"substring {sub_str} occurs at indicies{position}")

# Write a code to perform basic string compression using the counts of repeated characters .
word=input("Enter the string:-")
current_char=word[0]
count=1
compressed_str=""
for char in word[1:]:
  if char==current_char:
    count+=1
  else:
    compressed_str+=current_char+str(count)
    current_char=char
    count=1

compressed_str+=current_char+str(count)
if len(compressed_str)<len(word):
  print(f"compressed word is:{compressed_str}")
else:
  print("No compression needed")

# Write a code to determine if a string has all unique characters .
word=input("enter your string:-")
s=set(word)
if len(word)==len(s):
  print(f"{word} has all unique characters")
else:
    print(f"{word} does not have all unique characters")

#  Write a code to convert a given string to uppercase or lowercase .
word=input("Enter the string:-")
choice=input("Enter your choice(uppercase/lowercase):-")
if choice=="uppercase":
  print(word.upper())
elif choice=="lowercase":
  print(word.lower())
else:
  print("wrong choice")

# Write a code to count the number of words in a string .
word=input("enter your string:-")
count=len(word.split(" "))
print(f"Number of words in given string are:{count}")

# Write a code to concatenate two strings without using the + operator .
word1=input("enter first string:-")
word2=input("enter second string:-")
print("".join([word1,word2]))

#  Write a code to remove all occurrences of a specific element from a list .
li=[1,2,3,4,5,2,7,2,2,8]
remove_item=2
new_li=[item for item in li if item!=remove_item]
print(new_li)

#  Implement a code to find the second largest number in a given list of integers .
li=[10,22,3,1,7,100,32,50]
li.sort()
print(f" second largest number is :{li[-2]}")

# Create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values .
li=[1,2,4,4,2,5,8,1,1,8,5,5,5,8]
new_dict={item:li.count(item) for item in set(li)}
print(new_dict)

# Write a code to reverse a list in place without using any built-in reverse function .
li=[1,2,3,4,5,6,7,8,9]
start=0
end=len(li)-1
while start<end:
  li[start],li[end]=li[end],li[start]
  start+=1
  end-=1
print(f"reversed list is : {li}")

# Implement a code to find and remove duplicates from a list while preserving the original order of elements .

new_li=[]
for num in li:
  if num not in new_li:
    new_li.append(num)
print(new_li)

#  Create a code to check if a given list is sorted (either in ascending or descending order) or not .
li=[6,5,4,3,2,1]
if li==sorted(li):
    print("Sorted in ascending order")
elif li==sorted(li,reverse=True):
  print("Sorted in descending order")
else:
  print("List is not sorted")

# Write a code to merge two sorted list into a single sorted list .
li1=[1,3,5,7]
li2=[2,3,4,5,6]
li3=li1+li2
li3.sort()
print(li3)

# Implement a code to find the intersection of two given list
li1=[1,3,5,7,3,5]
li2=[2,3,4,5,6,6]
new_li1=list(set(li1))
new_li2=list(set(li2))
li3=[item for item in new_li1 if item in new_li2]
print(f" Intersection of two given list:- {li3}")

# Create a code to find the union of two list without duplicates .
li1=[1,3,5,7,3,5]
li2=[2,3,4,5,6,6]
new_li1=list(set(li1))
new_li2=list(set(li2))
li3=new_li2+[i for i in li1 if i not in li2]
print(f" Union of two given list:- {li3}")

#  Write a code to shuffle a given list randomly without using any built-in shuffle function .
li=[1,2,3,4,5,6,7,8,9,10]
n=len(li)
for i in range(n):
  j=(i+7)%n
  li[i],li[j]=li[j],li[i]
print(li)

# Write a code that takes two tuples as input and returns a new tuple containing elements that are common to both input tuples .
tup1=(1,2,3,4,5,"rohan",1,4)
tup2=(4,"rohan",5,"Rohan",2,2)
tup3=tuple(set(tup1) & set(tup2))
print(f"lements common to both tuples:- {tup3}")

# Create a code that prompts the user to enter two sets of integers separated by commas. Then , print the intersection of these two sets .
inp1=input("Enter 1st set of integers seperated by commas:-")
inp2=input("Enter 2nd set of integers seperated by commas:-")
set1=set(map(int,inp1.split(",")))
set2=set((map(int,inp2.split(","))))
set3=set1&set2
print(f"intersection is:-{set3}")

#  Write a code to concatenate two tuples. The function should take two tuples as input and return a new tuple containing elements from both input tuples.
def tup(tuple1,tuple2):
  return tuple1+tuple2
tup1=(1,2,3,4,5)
tup2=(3,4,5,6,7)

tup3=tup(tup1,tup2)
print(tup3)

# Develop a code that prompts the user to input two sets of strings. Then, print the elements that are present in first set but not in the second set .
inp1=input("enter 1st set of strings:-")
inp2=input("enter 2nd set of strings:-")
set1=set(inp1.split(","))
set2=set(inp2.split(","))
set3=set1-set2
print(f"elements present in 1st set but not in 2nd set:-{set3}")

# Create a code that takes a tuple and two integrs as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices .
def tuples(tup,num1,num2):
  final_tup=tup[num1:num2]
  print(f"final tuple is:-{final_tup}")
tup_inp=tuple(input("Enter your set of elements for tuple:-").split(","))
inp1=int(input("enter 1st integer:-"))
inp2=int(input("enter 2nd integer:-"))
tuples(tup_inp,inp1,inp2)

#  Write a code that prompts the user to input two sets of characters. Then print the union of these two sets .
set1=set(input("enter 1st set of characters:-").split(","))
set2=set(input("enter 2nd set of characters:-").split(","))
set3=set1|set2
print(f"union of two sets are:-{set3}")

# Develop a code that takes a tuple of integrs as input. The function should return the maximum and minimum values from the tuple using tuple unpacking .
tup1=(1,2,3,4,5,5)
print(f" maximum value is:{max(tup1)}")
print(f" minimum value is:{min(tup1)}")

# Creat a code that defines two sets of integers. Then print the union , intersection and differnnce of these two sets .
set1={1,2,3,4,5,3,3,5}
set2={3,4,5,5,6,7,8}
print(f"union of sets are:{set1|set2}")
print(f"intersection of sets are:{set1&set2}")
print(f"difference of sets are:{set1-set2}")

# Write a code that takes a tuple and an element as input. The function should return the count of occurrences of the given element in the tuple .
tup1=(1,2,3,45,2,2,5,6)
element=2
def tup(tup1,element):
  occur=tup1.count(element)
  print(f"count of occurrences of the given element in the tuple:{occur}")

tup(tup1,element)

# Develop a code that prompts the user to input two sets of strings. Then print the symmetric difference of these two sets .
set1=set(input("enter 1st set of strings:- ").split(","))
set2=set(input("enter 2nd set of strings:- ").split(","))
print(f"symmetric difference of sets are:{set1^set2}")

#  Write a code that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the frequenncies of those words in the input list .
word=["honda","suzuki","yamaha","honda","honda","hero","bajaj","hero","hero"]
word_dict={ i: word.count(i) for i in set(word) }
print(word_dict)

# Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are common keys the values should be added together .
dic1={"apple":10,"orange":50,"mango":100}
dic2={"orange":100,"kiwi":20,"apple":50}
new_dict={**dic1,**dic2}
for key,value in dic1.items():
  if key in dic2:
    new_dict[key]+=value
print(new_dict)

# Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of keys as input and return the corresponding value. If any of the keys do not exist in the dictionary the function should return None .
def get_value(dic, keys):
    current_dict = dic
    for key in keys:
        if key in current_dict:
            current_dict = current_dict[key]
        else:
            return None
    return current_dict
my_dict = {'apple': {'banana': {'cherry': 100}}}
keys = ['apple', 'banana', 'cherry']
value = get_value(my_dict, keys)
print(value)

# Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You can choose whether to sort in ascending or descending order .
fruits_dict = {'mango': 30, 'orange': 20, 'kiwi': 50, 'grapes': 100}
sorted_dict = dict(sorted(fruits_dict.items(), key=lambda item: item[1]))
print(f"Sorted dictionary (ascending order): {sorted_dict}")

fruits_dict = {'mango': 30, 'orange': 20, 'kiwi': 50, 'grapes': 100}
sorted_dict = dict(sorted(fruits_dict.items(), key=lambda item: item[1],reverse=True))
print(f"Sorted dictionary (descending order): {sorted_dict}")

#  Write a code that inverts a dictionary swapping keys and values. Ensure that the inverted dictionary correctly handles cases where multiple keys have the same value by storing the keys as a list in the inverted dictionary
dic={"apple":10,"orange":50,"mango":100,"kiwi":10,"guava":50}
new_dict={}
for value in dic.values():
  new_dict[value]=[]
  for key,new_value in dic.items():
    if value==new_value:
      new_dict[value].append(key)
print(f"inverted dictionary is:{new_dict}")